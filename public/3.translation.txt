ПОДГОНКА ДИЗАЙНА ДЛЯ ВСТРОЕННЫХ ПРИЛОЖЕНИЙ КОМПЬЮТЕРНОГО ЗРЕНИЯ

Алгоритмы компьютерного зрения имеют уникальные требования, которые не всегда согласуются с эффективностью и стоимостью встроенных систем. С одной стороны, алгоритмы компьютерного зрения требуют огромной вычислительной мощности; с другой стороны, не существует единого универсального конвейера для компьютерного зрения. Одна стабильная группа алгоритмов, подходящая для всех приложений, позволила бы тщательно спроектировать одну платформу, которая могла бы обслуживать широкий спектр систем компьютерного зрения. Однако разные приложения используют разные комбинации алгоритмов, часто с различными параметрами, поэтому разработчики должны проводить анализы, чтобы сопоставить потребности приложений с архитектурной платформой.

В течение последнего десятилетия наше исследование углубленно изучало требования к платформам и процессы для встроенных систем компьютерного зрения. В рамках нашей работы мы разработали методологию для исследования пространства дизайна, которая позволяет разработчикам быстро оценивать компромиссы между аппаратным и программным обеспечением, определяя как общий объем вычислений, так и конкретные характеристики вычислительных блоков.

Наша методология сосредотачивается на двух критически важных задачах в системах компьютерного зрения: числовых характеристиках и памяти. Каждая из этих задач важна сама по себе, но они также взаимодействуют, поскольку высокоточные числовые представления требуют большего объема памяти и пропускной способности памяти. Наша методология сочетает анализ числового динамического диапазона с симуляциями компьютерной архитектуры, помогая разработчикам в совместном проектировании и переосмыслении алгоритмов и архитектуры, а также предоставляя инсайты, которые могут направить их к более обоснованному выбору платформы.

Мы использовали нашу методологию для нескольких проектов, включая систему видеонаблюдения на основе умной камеры, которая следит за людьми на железнодорожных станциях. Возможность выполнять анализ на месте в камере важна для крупномасштабных систем компьютерного зрения. Некоторые многокамерные системы отправляют видео в облако или на удаленный сервер для анализа, что потребляет значительную полосу пропускания. Системы анализа на месте могут обеспечить, что необработанное видео никогда не покидает камеру; дополнительная конфиденциальность, создаваемая отсутствием видеозаписи, привлекательна во многих ситуациях. Однако создание распределенной системы умных камер требует узлов с достаточной вычислительной мощностью для реализации необходимых алгоритмов. Пространство дизайна многокамерных систем компьютерного зрения еще больше, что подчеркивает необходимость индивидуализированных вычислительных платформ.

С нашей методологией разработчики многокамерных систем могут быстро сравнивать платформы на основе программируемых пользователем вентильных матриц (FPGA) и центральных процессоров (CPU), а также графических процессоров (GPU), что делает совместное проектирование аппаратного и программного обеспечения более эффективным. Такие сравнения становятся все более важными при оценке эффективности систем, особенно на основе GPU.

ТЕКУЩИЕ ОГРАНИЧЕНИЯ ИНСТРУМЕНТОВ

Наша методология проектирования направлена на преодоление большого семантического разрыва между высоким уровнем, на котором разрабатываются большинство алгоритмов компьютерного зрения, и проблемами, которые архитекторы должны решать для создания жизнеспособной встроенной реализации компьютерного зрения. Многие разработчики алгоритмов используют арифметику с плавающей запятой двойной точности, чтобы избежать числовых проблем, что ведет к значительным затратам памяти и энергии. Они часто используют Matlab или библиотеку OpenCV, которые предоставляют библиотечные функции для очень абстрактных операций, скрывая затраты на реализацию.

Пропускная способность и размер памяти, производительность в реальном времени, потребление энергии и мощности - ключевые метрики для оценки ценности встроенной вычислительной системы - не легко определимы из этих абстрактных представлений. Даже если специалист по встроенным системам создает окончательный алгоритм, разработчики алгоритмов компьютерного зрения должны активно участвовать в изучении компромиссов между точностью, производительностью и энергопотреблением.

Разработчики алгоритмов компьютерного зрения лучше подготовлены для этого исследования пространства дизайна, поскольку большинство текущих инструментов для встроенных систем не обладают достаточной абстракцией. Следовательно, требуется значительное усилие, чтобы достаточно перевести алгоритм для оценки компромиссов дизайна, которые могут привести к высокой точности, низкому времени выполнения и эффективному использованию энергии. Например, наборы инструментов Xilinx System Generator и Jem-Vivado предоставляют блоки цифровой обработки сигналов (DSP) и блоки высокого уровня синтеза, но эти инструменты требуют экспертизы в архитектуре и дизайне аппаратного обеспечения. Работа над абстракциями, ориентированными на DSP, такими как синхронный поток данных, предоставляет более высокоуровневую программную абстракцию, но инструменты для автоматического отображения алгоритмических задач на гетерогенные архитектуры все еще отсутствуют. Такие инструменты могут значительно упростить процесс проектирования. Например, в предыдущей работе мы разработали методы отображения паттернов доступа к памяти на многобанковые и ранжированные структуры динамической оперативной памяти (DRAM), поскольку эти задачи обычно требуют ручной работы.

Matlab Fixed Point Designer предоставляет инструменты для анализа требований к числовой точности, но не связывает эти характеристики с характеристиками, ориентированными на реальное время, такими как пропускная способность памяти. Архитектуры, разработанные для конкретных операций, таких как EFFEx для извлечения признаков, предоставляют лишь одну точку в пространстве дизайна.

ПЛАТФОРМЕННО-НЕЗАВИСИМОЕ ИССЛЕДОВАНИЕ

Наша методология использует платформенно-независимые инструменты для измерения характеристик алгоритмов, что помогает выявить ключевые узкие места алгоритма. Многие разработчики высокопроизводительных встроенных систем сначала отображают алгоритм на платформу, а затем оптимизируют его; наша методология подчеркивает использование платформенно-независимых измерений для руководства выбором платформы.

Характеристики алгоритмов

Анализ начинается с реализации прототипа алгоритма компьютерного зрения, который будет отображен на встроенную систему на универсальном ПК. Чтобы определить сложность реализации программного обеспечения, мы анализируем его составляющие задачи, разделяя систему на соответствующие задачи с операциями.

Затем мы измеряем требования алгоритма к ресурсам, включая количество операций и пропускную способность памяти. Хотя для простых алгоритмов достаточно приблизительного анализа, многие алгоритмы компьютерного зрения имеют сложные потоки управления, что исключает ручной анализ. Мы можем получить необходимые измерения без полного отображения на целевую реализацию, генерируя количество операций и доступов к памяти на одной архитектуре и затем отображая эти данные на другие. Измерение количества операций и доступа к памяти на коде, близком к разработчику алгоритмов, позволяет очень рано исследовать пространство дизайна, что, в свою очередь, позволяет при необходимости корректировать алгоритм.

Инструменты, такие как SimpleScalar или VTune, полезны при исследовании исполняемого кода. Если алгоритм был разработан на языке, таком как C или C++, SimpleScalar или VTune могут работать с скомпилированным кодом; для алгоритмов, разработанных на Matlab, разработчики могут генерировать код и затем использовать эти инструменты для его анализа.

Требования к оборудованию

После того как разработчики определили требования к ресурсам, они должны рассмотреть потребности в оборудовании: количество процессоров, специальные ускорители и так далее. Измерения ресурсов дают прямую информацию о пропускной способности и энергопотреблении, но не так много данных о задержке. Эта характеристика лучше анализируется через анализ потока данных, который независим от таких метрик, как размер кэша и прямой доступ к памяти (DMA).

Для облегчения выбора платформы разработчики могут проводить дополнительные симуляции для измерения пропускной способности и энергопотребления. В некоторых случаях разработчикам может потребоваться уточнить первоначальное разбиение задач для лучшего согласования с доступностью ускорителей или для приспособления реализации конкретной функции в аппаратуре. Например, разработчики могут решить реализовать функцию ядра в аппаратуре, но использовать программное обеспечение для управления выполнением ядра.

Многие платформы позволяют некоторую свободу в выборе числового представления помимо спецификации типа данных (char, integer, double). Это особенно верно для FPGA, но также в меньшей степени для DSP и микроконтроллеров. В результате разработчики могут изменять представление и не полагаться исключительно на одинарную или двойную точность.

Проектирование числовых представлений и анализ точности широко признаны ключевыми частями проектирования аппаратного и программного обеспечения для DSP. Анализ допустимого изменения точности вывода приложения с точки зрения экономии пропускной способности и внутреннего хранилища является критически важной частью исследования пространства дизайна. Очевидно, что выбор представления имеет прямое влияние на использование внутренней памяти и пропускную способность. Более того, поскольку алгоритмы компьютерного зрения, как и любые вычислительно интенсивные задачи, могут требовать больших объемов внутреннего хранилища, раннее определение требований к памяти позволяет корректировать алгоритмы, что может сэкономить усилия на более поздних и дорогих этапах реализации.

